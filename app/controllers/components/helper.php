<?php

/**
 * Description of Helper
 *
 * @author UDAYA
 */

date_default_timezone_set('Asia/Phnom_Penh');

class HelperComponent extends Object {
    var $components = array('AutoId');
    
    function getModuleCode($modCode, $modId, $field, $table, $con, $length = 7){
        return $this->AutoId->moduleGenerateCode($modCode, $modId, $field, $table, $con, $length);
    }
    
    function getAutoGenerateMeetingNote() {
        //return $this->AutoId->generateAutoCode('vendors', 'vendor_code', 7, 'V');
        return $this->AutoId->generateAutoCodeTwo('meeting_notes', 'code', 7, 'MEN', 1, 'is_active>0');
    }

    function getAutoGenerateVendorCode() {
        //return $this->AutoId->generateAutoCode('vendors', 'vendor_code', 7, 'V');
        return $this->AutoId->generateAutoCodeTwo('vendors', 'vendor_code', 7, 'v', 1, 'is_active>0');
    }

    function getAutoGenerateEmployeeCode() {
        // return $this->AutoId->generateAutoCode('employees', 'employee_code', 7, 'EM');
        return $this->AutoId->generateAutoCodeTwo('employees', 'employee_code', 7, 'EM', 1, 'is_active>0');
    }

    function getAutoGenerateService(){
        // return $this->AutoId->generateAutoCode('services', 'code', 7, 'SV');
        return $this->AutoId->generateAutoCodeTwo('services', 'code', 7, 'SV', 1, 'is_active>0');
    }

    function getAutoGenerateTodoList() {
        // return $this->AutoId->generateAutoCode('todo_lists', 'code', 7, 'TDL');
        return $this->AutoId->generateAutoCodeTwo('todo_lists', 'code', 7, 'TDL', 1, 'is_active>0');
    }

    function getAutoGenerateMeetingTheme() {
        // return $this->AutoId->generateAutoCode('meeting_themes', 'code', 7, 'MET');
        return $this->AutoId->generateAutoCodeTwo('meeting_themes', 'code', 7, 'MET', 1, 'is_active>0');
    }
    
    function getAutoGenerateExpenseCode() {
        return $this->AutoId->generateAutoCode('expenses', 'reference', 7, 'CE', 1, 'status > 0');
    }

    function getAutoGeneratePromoPointCode() {
        return $this->AutoId->generateAutoCode('promotional_points', 'code', 7, 'PRP', 1, 'status > 0');
    }

    function getAutoGeneratePosCode() {
        return $this->AutoId->generateAutoCode('sales_orders', 'so_code', 7, 'POS', 1, 'status > 0');
    }

    function getAutoGenerateSalesOrderCode() {
        return $this->AutoId->generateAutoCode('sales_orders', 'so_code', 7, 'INV', 1, 'status > 0');
    }
    
    function getAutoGenerateOrderCode() {
        return $this->AutoId->generateAutoCode('orders', 'order_code', 7, 'SO', 1, 'status > 0');
    }

    function getAutoGenerateSalesOrderReceiptCode() {
        return $this->AutoId->generateAutoCode('sales_order_receipts', 'receipt_code', 7, 'SR', 1, '');
    }

    function getAutoGenerateDeliveryCode() {
        return $this->AutoId->generateAutoCode('deliveries', 'code', 7, 'DN', 1, 'status > 0');
    }
    
    function getAutoGenerateQuotationCode() {
        return $this->AutoId->generateAutoCode('quotations', 'quotation_code', 7, 'Q', 1, 'status > 0');
    }
    
    function getAutoGenerateInvAdjCode() {
        return $this->AutoId->generateAutoCode('cycle_products', 'reference', 7, 'ADJ', 1, 'status > 0');
    }

    function getAutoGenerateCreditMemoCode() {
        return $this->AutoId->generateAutoCode('credit_memos', 'cm_code', 7, 'CM', 1, 'status > 0');
    }

    function getAutoGenerateCreditMemoReceiptCode() {
        return $this->AutoId->generateAutoCode('credit_memo_receipts', 'receipt_code', 7, 'CMR', 1, '');
    }

    function getAutoGeneratePurchaseRequestCode() {
        return $this->AutoId->generateAutoCode('purchase_requests', 'pr_code', 7, 'PO', 1, 'status > -1');
    }

    function getAutoGeneratePurchaseOrderCode() {
        return $this->AutoId->generateAutoCode('purchase_orders', 'po_code', 7, 'PB', 1, 'status > 0');
    }
    
    function getAutoGenerateGoodsReceiptCode() {
        return $this->AutoId->generateAutoCode('purchase_receive_results', 'code', 7, 'GR', 1, '');
    }

    function getAutoGeneratePurchaseOrderReceiptCode() {
        return $this->AutoId->generateAutoCode('pvs', 'pv_code', 7, 'PV', 1, '');
    }
    
    function getAutoGeneratePurchaseReceiveCode() {
        return $this->AutoId->generateAutoCode('purchase_receive_results', 'code', 7, 'PR', 1, 'status > 0');
    }

    function getAutoGeneratePurchaseReturnCode() {
        return $this->AutoId->generateAutoCode('purchase_returns', 'pr_code', 7, 'BR', 1, 'status > 0');
    }

    function getAutoGeneratePurchaseReturnReceiptCode() {
        return $this->AutoId->generateAutoCode('credit_memo_receipts', 'receipt_code', 7, 'RBR', 1, '');
    }

    function getAutoGenerateProductCode() {
        return $this->AutoId->generateAutoCode('products', 'code', 7, 'P');
    }

    function getAutoGenerateTransferCode() {
        return $this->AutoId->generateAutoCode('transfer_orders', 'to_code', 7, 'TO', 1, 'status > 0');
    }
    
    function getAutoGenerateTransferReceiveCode() {
        return $this->AutoId->generateAutoCode('transfer_receive_results', 'code', 7, 'TR', 1, '');
    }

    function getAutoGenerateCustomerCode() {
        return $this->AutoId->generateAutoCode('customers', 'customer_code', 7, 'C');
    }
    
    function getAutoGenerateShiftCode() {
        return $this->AutoId->generateAutoCode('shifts', 'shift_code', 7, 'S', 'status > 0');
    }

    function getAutoGenerateOtherCode() {
        return $this->AutoId->generateAutoCode('others', 'other_code', 7, 'OT');
    }

    function getAutoGenerateFixedAssetCode() {
        return $this->AutoId->generateAutoCode('fixed_assets', 'fixed_asset_code', 7, 'FA');
    }
    
    function getAutoGenerateExchangeCode() {
        return $this->AutoId->generateAutoCode('exchange_rates', 'code', 7, 'Ex');
    }
    
    function getAutoGeneratePosReceipt($code) {
        return $this->AutoId->generateAutoCode('sales_order_receipts', 'receipt_code', 7, $code, 1, '');
    }
    
    function getAutoGenerateRequestStcokCode() {
        return $this->AutoId->generateAutoCode('request_stocks', 'code', 7, 'RS', 1, 'status > 0');
    }

    function checkDouplicate($strCol, $strTbl, $val, $condition="is_active = 1") {
        $exist = false;
        $strSQL = '';
        $strSQL = "SELECT Count(" . $strCol . ") as Found FROM " . $strTbl . " WHERE " . $condition . " AND " . $strCol . "= '" . mysql_real_escape_string($val) . "' ";
        $result = mysql_query($strSQL) or die(mysql_error());
        $found = mysql_result($result, 0, 0);
        if ($found == 0):
            $exist = false;
        else:
            $exist = true;
        endif;
        return $exist;
    }

    function checkDouplicateEdit($strCol, $strTbl, $idCompare, $val, $condition="is_active = 1") {
        $exist = false;
        $strSQL = '';
        $strSQL = "SELECT Count(" . $strCol . ") as Found FROM " . $strTbl . " WHERE " . $condition . " AND id <> $idCompare AND " . $strCol . "= '" . mysql_real_escape_string($val) . "' ";
        $result = mysql_query($strSQL) or die(mysql_error());
        $found = mysql_result($result, 0, 0);
        if ($found == 0):
            $exist = false;
        else:
            $exist = true;
        endif;
        return $exist;
    }

    function genRandomString() {
        $character_set_array = array();
        $character_set_array[] = array('count' => 7, 'characters' => 'abcdefghijklmnopqrstuvwxyz');
        $character_set_array[] = array('count' => 1, 'characters' => '0123456789');
        $temp_array = array();
        foreach ($character_set_array as $character_set) {
            for ($i = 0; $i < $character_set['count']; $i++) {
                $temp_array[] = $character_set['characters'][rand(0, strlen($character_set['characters']) - 1)];
            }
        }
        shuffle($temp_array);
        return implode('', $temp_array);
    }

    function switchDate($date, $format) {
        $list = explode($format, $date);
        return $list[2] . "-" . $list[1] . "-" . $list[0];
    }

    function fileRename($oldName, $newName) {
        $ext = split("\.", $oldName);
        return $newName . '.' . $ext[sizeof($ext) - 1];
    }

    
    function fileGetExtension($fileName) {
        $ext = split("\.", strtolower($fileName));
        return $ext[sizeof($ext) - 1];
    }

    function dateConvert($rawDate) {
        if (($rawDate == '00/00/0000 00:00:00') || ($rawDate == ''))
            return false;

        $table_date = split('/', $rawDate);
        $day = $table_date[sizeof($table_date) - 3];
        $month = $table_date[sizeof($table_date) - 2];

        $year = $table_date[sizeof($table_date) - 1];

        $str_date = $year . '-' . $month . '-' . $day;
        return ($str_date);
    }
    
    function replaceThousand($value){
        $value = str_replace(",","",$value);
        return $value;
    }
    
    function getAutoGeneratePointOfSaleCode($string = null) {
        return $this->AutoId->generateAutoCodeSale('sales_orders', 'so_code', 6, $string);
    }

    function checkWaitingNumberToday() {
        $now = date("Y-m-d");
        $query = "SELECT id FROM waiting_numbers WHERE DATE(created) = DATE('$now')";
        $result = mysql_query($query);
        if (mysql_num_rows($result) > 0) {
            return true;
        } else {
            return false;
        }
    }
    
    function showTotalQty($total_qty, $labelMainUom, $smallUom, $smallUomLabel) {
        $totalRemain = "";
        $totalMain = (int) ($total_qty / $smallUom);
        $checkRemain = (int) ($total_qty % $smallUom);
        if ($checkRemain > 0) {
            $totalRemain = ($total_qty - (int) ($totalMain * $smallUom)) . " " . $smallUomLabel;
        }
        return $totalMain . " " . $labelMainUom . "<br/> " . $totalRemain;
    }
    
    function checkDouplicateEditOther($strCol, $strTbl, $idCompare = "", $val = "", $condition="is_active = 1", $join = "") {
        $exist = false;
        $strSQL = '';
        $strSQL = "SELECT Count(" . $strCol . ") as Found FROM " . $strTbl . " " . $join . " WHERE " . $idCompare . " " . $strCol . "= '" . mysql_real_escape_string($val) . "' AND " . $condition;
        $result = mysql_query($strSQL) or die(mysql_error());
        $found = mysql_result($result, 0, 0);
        if ($found == 0):
            $exist = false;
        else:
            $exist = true;
        endif;
        return $exist;
    }

    function checkDouplicateSku($strCol, $strTbl, $val, $condition="is_active = 1", $join = "") {
        $exist = false;
        $strSQL = '';
        $strSQL = "SELECT Count(" . $strCol . ") as Found FROM " . $strTbl . " " . $join . " WHERE (" . $strCol . "= '" . mysql_real_escape_string($val) . "' " . $condition;
        $result = mysql_query($strSQL) or die(mysql_error());
        $found = mysql_result($result, 0, 0);
        if ($found == 0):
            $exist = false;
        else:
            $exist = true;
        endif;
        return $exist;
    }
    
    function roundPrice($total_price){
        $numberCon  = ($total_price * 10);
        $number     = explode(".", $numberCon);
        if(!empty($number[1])){
            if ($number[1] <= 5 && $number[1] > 0) {
                $total_price = ($number[0] . ".5");
            } elseif ($number[1] > 5 && $number[1] <= 9) {
                $total_price = ($number[0] + 1);
            } else {
                $total_price = $number[0];
            }
            $total_price = $total_price / 10;
        }else{
            $total_price = $total_price;
        }
        $total_price = str_replace(",", "", $total_price);
        return $total_price;
    }
    
    function updateReceive($order_id) {
        $sql = mysql_query("SELECT * FROM `purchase_receives` WHERE purchase_order_id = " . $order_id . " and status = 1");
        if (@$num = mysql_num_rows($sql)) {
            return 1;
        } else {
            return 0;
        }
    }
    
    function preventInput($input){
        $result = mysql_real_escape_string(strip_tags($input));
        return $result;
    }
    
    function checkAccess($userId = null, $controller = null, $action = null) {
        if (!$controller) {
            $controller = $this->params['controller'];
        }
        if (!$action) {
            $action = $this->params['action'];
        }

        $accessRules = $_SESSION['accessRules'];
        $queryUserGroup = mysql_query("SELECT group_id FROM user_groups WHERE user_id=" . $userId);
        while ($dataUserGroup = mysql_fetch_array($queryUserGroup)) {
            if (!empty($accessRules[$dataUserGroup['group_id']][$controller]) && (is_array($accessRules[$dataUserGroup['group_id']][$controller]) && in_array($action, $accessRules[$dataUserGroup['group_id']][$controller]))) {
                return true;
            }
        }
        return false;
    }
    
    function dateShort($rawDate, $format='d/m/Y') {
        if (($rawDate == '0000-00-00 00:00:00') || ($rawDate == ''))
            return false;
        $year = substr($rawDate, 0, 4);
        $month = (int) substr($rawDate, 5, 2);
        $day = (int) substr($rawDate, 8, 2);
        $hour = (int) substr($rawDate, 11, 2);
        $minute = (int) substr($rawDate, 14, 2);
        $second = (int) substr($rawDate, 17, 2);

        if (@date('Y', mktime($hour, $minute, $second, $month, $day, $year)) == $year) {
            return date($format, mktime($hour, $minute, $second, $month, $day, $year));
        } else {
            return ereg_replace('2037' . '$', $year, date($format, mktime($hour, $minute, $second, $month, $day, 2037)));
        }
    }
    
    function saveUserActivity($userId, $type, $action, $from = 0, $to = 0){
        $r = 0;
        $restCode = array();
        $dateNow = date("Y-m-d H:i:s");
        $useragent = $_SERVER['HTTP_USER_AGENT'];
        $browser = $this->getBrowser($useragent);
        $os      = $this->getOS($useragent);
        $ipAddr  = $this->getIpAddress();
        mysql_query("INSERT INTO `user_activity_logs` (`user_id`, `type`, `tbl_from_id`, `tbl_to_id`, `action`, `browser`, `operating_system`, `ip`, `created`) "
                  . "VALUES (".$userId.", '".$type."', '".$from."', '".$to."', '".$action."', '".$browser."', '".$os."', '".$ipAddr."', '".$dateNow."');");
        // Convert to REST
        $restCode[$r]['user_id'] = $this->getSQLSyncCode('users', $userId);
        $restCode[$r]['type']    = $type;
        $restCode[$r]['action']  = $action;
        $restCode[$r]['browser'] = $browser;
        $restCode[$r]['operating_system'] = $os;
        $restCode[$r]['ip']       = $ipAddr;
        $restCode[$r]['created']  = $dateNow;
        $restCode[$r]['dbtodo']   = 'user_activity_logs';
        $restCode[$r]['actodo']   = 'is';
        // Save File Send to Billing
        $this->sendFileToSyncUser($restCode);
    }
    
    function generateRandomString($length = 10) {
        $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
        $charactersLength = strlen($characters);
        $randomString = '';
        for ($i = 0; $i < $length; $i++) {
            $randomString .= $characters[rand(0, $charactersLength - 1)];
        }
        return $randomString;
    }
    // SYNC to System
    function sendFileToSync($inputSync, $companyId, $branchId, $type = 2){
        if(!empty($inputSync) && $inputSync != ''){
            // Save Sync As File
            $dateSend = date("Y-m-d H:i:s");
            $synCode  = md5(rand().strtotime(date("Y-m-d H:i:s")));
//            $content  = json_encode($this->convertRestToEncrypt($inputSync));
            $content  = json_encode($inputSync);
            $contentSize = strlen($content);
//            mysql_query("INSERT INTO ".SYNC_SYSTEM."`sends` (`company_id`, `branch_id`, `syn_code`, `contents`, `content_size`, `created`, `type`) VALUES ('".$companyId."', '".$branchId."', '".$synCode."', '".mysql_real_escape_string(str_replace("'", "&#39;", $content))."', ".$contentSize.", '".$dateSend."', ".$type.");");
        }
    }
    // SYNC to User
    function sendFileToSyncUser($inputSync){
        if(!empty($inputSync) && $inputSync != ''){
            // Save Sync As File
            $dateSend = date("Y-m-d H:i:s");
            $synCode  = md5(rand().strtotime(date("Y-m-d H:i:s")));
            $content  = json_encode($this->convertRestToEncrypt($inputSync));
            $contentSize = strlen($content);
//            mysql_query("INSERT INTO ".SYNC_USER."`sends` (`syn_code`, `contents`, `content_size`, `created`) VALUES ('".$synCode."', '".mysql_real_escape_string(str_replace("'", "&#39;", $content))."', ".$contentSize.", '".$dateSend."');");
        }
    }
    // SYNC to E-Commerce
    function sendFileToSyncPublic($json){
        $content = $this->encode(json_encode($json), KEY_API);
        $post    = "co=".$content;
        $url     = SYNC_PUBLIC;
        // CURL
        $curl    = curl_init();
        curl_setopt($curl, CURLOPT_URL, $url);
        curl_setopt($curl, CURLOPT_POST, 1);
        curl_setopt($curl, CURLOPT_POSTFIELDS, $post);
        curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, 0);
        curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, 0);
        $result = curl_exec($curl);
        $curl_errno = curl_errno($curl);
        $curl_error = curl_error($curl);
        curl_close ($curl);
        if ($curl_errno > 0) {
            $result['status'] = 0;
            $result['info']   = "cURL Error ($curl_errno): $curl_error\n";
            $return = $result;
        } else {
            $return = json_decode($result);
        }
        return $return;
    }
    
    function convertRestToEncrypt($contents){
        $result = array();
        if(!empty($contents)){
            $i = 0;
            foreach($contents as $content){
                foreach($content as $key => $val){
                    $encrypt = $this->encryptString($key);
                    $result[$i][$encrypt] = $val;
                }
                $i++;
            }
        }
        return $result;
    }
    
    function getOS($useragent) { 
        $os_platform    =   "Unknown OS Platform";
        $os_array       =   array(
                                '/windows nt 10/i'     =>  'Windows 10',
                                '/windows nt 6.3/i'     =>  'Windows 8.1',
                                '/windows nt 6.2/i'     =>  'Windows 8',
                                '/windows nt 6.1/i'     =>  'Windows 7',
                                '/windows nt 6.0/i'     =>  'Windows Vista',
                                '/windows nt 5.2/i'     =>  'Windows Server 2003/XP x64',
                                '/windows nt 5.1/i'     =>  'Windows XP',
                                '/windows xp/i'         =>  'Windows XP',
                                '/windows nt 5.0/i'     =>  'Windows 2000',
                                '/windows me/i'         =>  'Windows ME',
                                '/win98/i'              =>  'Windows 98',
                                '/win95/i'              =>  'Windows 95',
                                '/win16/i'              =>  'Windows 3.11',
                                '/macintosh|mac os x/i' =>  'Mac OS X',
                                '/mac_powerpc/i'        =>  'Mac OS 9',
                                '/linux/i'              =>  'Linux',
                                '/ubuntu/i'             =>  'Ubuntu',
                                '/iphone/i'             =>  'iPhone',
                                '/ipod/i'               =>  'iPod',
                                '/ipad/i'               =>  'iPad',
                                '/android/i'            =>  'Android',
                                '/blackberry/i'         =>  'BlackBerry',
                                '/webos/i'              =>  'Mobile'
                            );
        foreach ($os_array as $regex => $value) { 

            if (preg_match($regex, $useragent)) {
                $os_platform    =   $value;
            }
        }   
        return $os_platform;

    }

    function getBrowser($useragent) {
      // check for most popular browsers first
      // unfortunately, that's IE. We also ignore Opera and Netscape 8
      // because they sometimes send msie agent
      if (strpos($useragent, 'MSIE') !== FALSE && strpos($useragent, 'Opera') === FALSE && strpos($useragent, 'Netscape') === FALSE) {
        //deal with Blazer
        if (preg_match("/Blazer\/([0-9]{1}\.[0-9]{1}(\.[0-9])?)/", $useragent, $matches)) {
          return 'Blazer ' . $matches[1];
        }
        //deal with IE
        if (preg_match("/MSIE ([0-9]{1,2}\.[0-9]{1,2})/", $useragent, $matches)) {
          return 'Internet Explorer ' . $matches[1];
        }
      }
      elseif (strpos($useragent, 'IEMobile') !== FALSE) {
        if (preg_match("/IEMobile\/([0-9]{1,2}\.[0-9]{1,2})/", $useragent, $matches)) {
          return 'Internet Explorer Mobile ' . $matches[1];
        }
      }
      elseif (strpos($useragent, 'Gecko')) {
        //deal with Gecko based

        //if firefox
        if (preg_match("/Firefox\/([0-9]{1,2}\.[0-9]{1,2}(\.[0-9]{1,2})?)/", $useragent, $matches)) {
          return 'Mozilla Firefox ' . $matches[1];
        }

        //if Netscape (based on gecko)
        if (preg_match("/Netscape\/([0-9]{1}\.[0-9]{1}(\.[0-9])?)/", $useragent, $matches)) {
          return 'Netscape ' . $matches[1];
        }

        //check chrome before safari because chrome agent contains both
        if (preg_match("/Chrome\/([^\s]+)/", $useragent, $matches)) {
          return 'Google Chrome ' . $matches[1];
        }

        //if Safari (based on gecko)
        if (preg_match("/Safari\/([0-9]{2,3}(\.[0-9])?)/", $useragent, $matches)) {
          return 'Safari ' . $matches[1];
        }

        //if Galeon (based on gecko)
        if (preg_match("/Galeon\/([0-9]{1}\.[0-9]{1}(\.[0-9])?)/", $useragent, $matches)) {
          return 'Galeon ' . $matches[1];
        }

        //if Konqueror (based on gecko)
        if (preg_match("/Konqueror\/([0-9]{1}\.[0-9]{1}(\.[0-9])?)/", $useragent, $matches)) {
          return 'Konqueror ' . $matches[1];
        }

        // if Fennec (based on gecko)
        if (preg_match("/Fennec\/([0-9]{1}\.[0-9]{1}(\.[0-9])?)/", $useragent, $matches)) {
          return 'Fennec' . $matches[1];
        }

        // if Maemo (based on gecko)
        if (preg_match("/Maemo\/([0-9]{1}\.[0-9]{1}(\.[0-9])?)/", $useragent, $matches)) {
          return 'Maemo' . $matches[1];
        }

        //no specific Gecko found
        //return generic Gecko
        return 'Gecko based';
      }
      elseif (strpos($useragent, 'Opera') !== FALSE) {
        //deal with Opera
        if (preg_match("/Opera[\/ ]([0-9]{1}\.[0-9]{1}([0-9])?)/", $useragent, $matches)) {
          return 'Opera ' . $matches[1];
        }
      }
      elseif (strpos($useragent, 'Lynx') !== FALSE) {
        //deal with Lynx
        if (preg_match("/Lynx\/([0-9]{1}\.[0-9]{1}(\.[0-9])?)/", $useragent, $matches)) {
          return 'Lynx ' . $matches[1];
        }
      }
      elseif (strpos($useragent, 'Netscape') !== FALSE) {
        //NN8 with IE string
        if (preg_match("/Netscape\/([0-9]{1}\.[0-9]{1}(\.[0-9])?)/", $useragent, $matches)) {
          return 'Netscape ' . $matches[1];
        }
      }
      else {
        //unrecognized, this should be less than 1% of browsers (not counting bots like google etc)!
        return 'unknown';
      }
    }
    
    function getIpAddress() {

            //Just get the headers if we can or else use the SERVER global
            if ( function_exists( 'apache_request_headers' ) ) {

                    $headers = apache_request_headers();

            } else {

                    $headers = $_SERVER;

            }

            //Get the forwarded IP if it exists
            if ( array_key_exists( 'X-Forwarded-For', $headers ) && filter_var( $headers['X-Forwarded-For'], FILTER_VALIDATE_IP, FILTER_FLAG_IPV4 ) ) {

                    $the_ip = $headers['X-Forwarded-For'];

            } elseif ( array_key_exists( 'HTTP_X_FORWARDED_FOR', $headers ) && filter_var( $headers['HTTP_X_FORWARDED_FOR'], FILTER_VALIDATE_IP, FILTER_FLAG_IPV4 )) {

                    $the_ip = $headers['HTTP_X_FORWARDED_FOR'];

            } else {

                    $the_ip = filter_var( $_SERVER['REMOTE_ADDR'], FILTER_VALIDATE_IP, FILTER_FLAG_IPV4 );

            }

            return $the_ip;

    }
    
    function createSysActivity($mod, $act, $bug, $userId, $staus){
        $r = 0;
        $restCode = array();
        $dateNow  = date("Y-m-d H:i:s");
        $useragent = $_SERVER['HTTP_USER_AGENT'];
        $browser = $this->getBrowser($useragent);
        $os      = $this->getOS($useragent);
        $ipAddr  = $this->getIpAddress();
        mysql_query("INSERT INTO `system_activities` (`module`, `act`, `bug`, `browser`, `operating_system`, `ip`, `created`, `created_by`, `status`) 
                     VALUES ('".$mod."', '".$act."', '".$bug."', '".$browser."', '".$os."', '".$ipAddr."', '".$dateNow."', ".$userId.", ".$staus.");");
        // Convert to REST
//        $sqlP = mysql_query("SELECT s_t FROM ".SYNC_USER."`syn_opts` WHERE 1 LIMIT 1");
//        $rowP = mysql_fetch_array($sqlP);
//        $restCode[$r]['project_id']  = "(SELECT id FROM projects WHERE rest_code = '".$rowP['s_t']."' ORDER BY id DESC LIMIT 1)";
//        $restCode[$r]['module']  = $mod;
//        $restCode[$r]['act']     = $act;
//        $restCode[$r]['bug']     = $bug;
//        $restCode[$r]['browser'] = $browser;
//        $restCode[$r]['operating_system'] = $os;
//        $restCode[$r]['ip']       = $ipAddr;
//        $restCode[$r]['created']  = $dateNow;
//        $restCode[$r]['created_by'] = $this->getSQLSyncCode('users', $userId);
//        $restCode[$r]['status']   = $staus;
//        $restCode[$r]['dbtodo']   = 'project_system_activities';
//        $restCode[$r]['actodo']   = 'is';
        // Save File Send to Billing
//        $this->sendFileToSyncUser($restCode);
        
    }
    
    function getClassId($companyId, $class, $locationGroupId){
        $classId = 0;
        $classArray = array();
        if(!empty($companyId) && !empty($class) && !empty($locationGroupId)){
            $classArray = unserialize($class);
            $classId = $classArray[$companyId][$locationGroupId];
        }
        return $classId;
    }
    
    function encryptString($string){
        $convert = '';

        // Convert Number
        $convert = preg_replace('[0]', '66-', $string);
        $convert = preg_replace('[1]', '77-', $convert);
        $convert = preg_replace('[2]', '55-', $convert);
        $convert = preg_replace('[3]', '11-', $convert);
        $convert = preg_replace('[4]', '88-', $convert);
        $convert = preg_replace('[5]', '99-', $convert);
        $convert = preg_replace('[6]', '00-', $convert);
        $convert = preg_replace('[7]', '98-', $convert);
        $convert = preg_replace('[8]', '97-', $convert);
        $convert = preg_replace('[9]', '96-', $convert);

        // Convert Lowercase
        $convert = preg_replace('[a]', '21-', $convert);
        $convert = preg_replace('[b]', '22-', $convert);
        $convert = preg_replace('[c]', '23-', $convert);
        $convert = preg_replace('[d]', '31-', $convert);
        $convert = preg_replace('[e]', '32-', $convert);
        $convert = preg_replace('[f]', '33-', $convert);
        $convert = preg_replace('[g]', '41-', $convert);
        $convert = preg_replace('[h]', '42-', $convert);
        $convert = preg_replace('[i]', '43-', $convert);
        $convert = preg_replace('[j]', '51-', $convert);
        $convert = preg_replace('[k]', '52-', $convert);
        $convert = preg_replace('[l]', '53-', $convert);
        $convert = preg_replace('[m]', '61-', $convert);
        $convert = preg_replace('[n]', '62-', $convert);
        $convert = preg_replace('[o]', '63-', $convert);
        $convert = preg_replace('[p]', '71-', $convert);
        $convert = preg_replace('[q]', '72-', $convert);
        $convert = preg_replace('[r]', '73-', $convert);
        $convert = preg_replace('[s]', '74-', $convert);
        $convert = preg_replace('[t]', '81-', $convert);
        $convert = preg_replace('[u]', '82-', $convert);
        $convert = preg_replace('[v]', '83-', $convert);
        $convert = preg_replace('[w]', '91-', $convert);
        $convert = preg_replace('[x]', '92-', $convert);
        $convert = preg_replace('[y]', '93-', $convert);
        $convert = preg_replace('[z]', '94-', $convert);

        // Convert Capital Word
        $convert = preg_replace('[A]', '021-', $convert);
        $convert = preg_replace('[B]', '022-', $convert);
        $convert = preg_replace('[C]', '023-', $convert);
        $convert = preg_replace('[D]', '031-', $convert);
        $convert = preg_replace('[E]', '032-', $convert);
        $convert = preg_replace('[F]', '033-', $convert);
        $convert = preg_replace('[G]', '041-', $convert);
        $convert = preg_replace('[H]', '042-', $convert);
        $convert = preg_replace('[I]', '043-', $convert);
        $convert = preg_replace('[J]', '051-', $convert);
        $convert = preg_replace('[K]', '052-', $convert);
        $convert = preg_replace('[L]', '053-', $convert);
        $convert = preg_replace('[M]', '061-', $convert);
        $convert = preg_replace('[N]', '062-', $convert);
        $convert = preg_replace('[O]', '063-', $convert);
        $convert = preg_replace('[P]', '071-', $convert);
        $convert = preg_replace('[Q]', '072-', $convert);
        $convert = preg_replace('[R]', '073-', $convert);
        $convert = preg_replace('[S]', '074-', $convert);
        $convert = preg_replace('[T]', '081-', $convert);
        $convert = preg_replace('[U]', '082-', $convert);
        $convert = preg_replace('[V]', '083-', $convert);
        $convert = preg_replace('[W]', '091-', $convert);
        $convert = preg_replace('[X]', '092-', $convert);
        $convert = preg_replace('[Y]', '093-', $convert);
        $convert = preg_replace('[Z]', '094-', $convert);

        // Convert Under Score
        $convert = preg_replace('[_]', '100-', $convert);

        return $convert;
    }
    
    function convertToDataSync($records, $table = ''){
        $restCode = array();
        $fields   = array();
        // Get Filed Name From Table
        $query = "SELECT * FROM ".$table;
        $result = mysql_query($query);
        $i = 0;
        while ($i < mysql_num_fields($result)){
           $fld = mysql_fetch_field($result, $i);
           $fields[] = $fld->name;
           $i++;
        }
        foreach($records AS $key => $value){
            if(!is_array($value) && $key != 'id' && $value != '' && in_array($key, $fields)){
                if($key == 'parent_id'){
                    $restCode[$key] = $this->getSQLSysCode($table, $value);
                } else {
                    $table = $this->listField($key);
                    if($table != '' && $value != '0' && $value != ''){
                        $restCode[$key] = $this->getSQLSysCode($table, $value);
                    } else {
                        $restCode[$key] = $value;
                    }
                }
            }
        }
        return $restCode;
    }
    
    function getSQLSyncCode($table, $id){
        $sqlSync = '0';
        $synCode = '';
        if(!empty($table) && !empty($id)){
            $sql = mysql_query("SELECT sys_code FROM ".$table." WHERE id = ".$id);
            $row = mysql_fetch_array($sql);
            $synCode = $row[0];
            $sqlSync = "(SELECT id FROM ".$table." WHERE sys_code = '".$synCode."' ORDER BY id DESC LIMIT 1)";
        }
        return $sqlSync;
    }
    
    function getSQLSync($table, $synCode){
        $sqlSync = "(SELECT id FROM ".$table." WHERE sys_code = '".$synCode."' ORDER BY id DESC LIMIT 1)";
        return $sqlSync;
    }
    
    function getSQLSysCode($table, $id){
        $synCode = '';
        if($id != '' && $id > 0 && $table != ''){
            $sql = mysql_query("SELECT sys_code FROM ".$table." WHERE id = ".$id) or die("Error: SELECT sys_code FROM ".$table." WHERE id = ".$id);
            $row = mysql_fetch_array($sql);
            $synCode = $row[0];
        }
        return $synCode;
    }
    
    function listField($check){
        $field = array();
        $field['user_id']  = 'users';
        $field['created_by']  = 'users';
        $field['modified_by'] = 'users';
        // Company & Branch
        $field['branch_id'] = 'branches';
        $field['branch_type_id'] = 'branch_types';
        $field['company_id'] = 'companies';
        $field['company_category_id'] = 'company_categories';
        $field['currency_id']  = 'currencies';
        $field['exchange_rate_id']  = 'exchange_rates';
        // Account
        $field['chart_account_id'] = 'chart_accounts';
        $field['income_chart_account_id']  = 'chart_accounts';
        $field['expense_chart_account_id'] = 'chart_accounts';
        $field['chart_account_group_id']   = 'chart_account_groups';
        $field['class_id']   = 'classes';
        $field['other_id']   = 'others';
        // Address
        $field['streets']    = 'street_id';
        $field['provinces']  = 'province_id';
        $field['districts']  = 'district_id';
        $field['commune_id'] = 'communes';
        $field['village_id'] = 'villages';
        // Customer
        $field['cgroup_id']   = 'cgroups';
        $field['customer_id'] = 'customers';
        // Term & Condition
        $field['term_condition_default_id'] = 'term_conditions';
        $field['term_condition_type_id'] = 'term_condition_types';
        $field['module_type_id'] = 'module_types';
        // UoM
        $field['from_uom_id']  = 'uoms';
        $field['to_uom_id']    = 'uoms';
        $field['uom_id']       = 'uoms';
        $field['price_uom_id'] = 'uoms';
        $field['size_uom_id']  = 'uoms';
        $field['weight_uom_id'] = 'uoms';
        // VAT
        $field['vat_setting_id']  = 'vat_settings';
        // Vendor
        $field['vgroup_id'] = 'vgroups';
        $field['vendor_id'] = 'vendors';
        // Warehouse
        $field['location_group_type_id'] = 'location_group_types';
        $field['location_group_id'] = 'location_groups';
        $field['from_location_group_id'] = 'location_groups';
        $field['to_location_group_id'] = 'location_groups';
        $field['location_id'] = 'locations';
        $field['location_from_id'] = 'locations';
        $field['location_to_id'] = 'locations';
        // Setting
        $field['payment_term_id'] = 'payment_terms';
        $field['price_type_id']   = 'price_types';
        $field['reason_id']  = 'reasons';
        $field['landed_cost_type_id']  = 'landed_cost_types';
        $field['shipment_id']  = 'shipments';
        $field['port_of_dischange_id']  = 'places';
        $field['final_place_of_delivery_id']  = 'places';
        $field['position_id'] = 'positions';
        // Product
        $field['product_id'] = 'products';
        $field['main_product_id']   = 'products';
        $field['packet_product_id'] = 'products';
        $field['pid'] = 'products';
        $field['pgroup_id']  = 'pgroups';
        // Discount
        $field['discount_id'] = 'discounts';
        // Section & Service
        $field['section_id']  = 'sections';
        $field['service_id']  = 'services';
        // Sales/Invoice
        $field['sales_order_id']  = 'sales_orders';
        $field['sales_order_detail_id']  = 'sales_order_details';
        $field['sales_order_receipt_id'] = 'sales_order_receipts';
        // Quotation
        $field['quotation_id']  = 'quotations';
        // Sales Order
        $field['order_id']  = 'orders';
        // Delivery
        $field['delivery_id']  = 'deliveries';
        // Credit Memo
        $field['credit_memo_id']  = 'credit_memos';
        $field['credit_memo_receipt_id']  = 'credit_memo_receipts';
        // Payment
        $field['receive_payment_id']  = 'receive_payments';
        // Customer Consignment
        $field['consignment_id']  = 'consignments';
        $field['consignment_detail_id']  = 'consignment_details';
        $field['consignment_return_id']  = 'consignment_returns';
        // Purchase Order
        $field['purchase_request_id']  = 'purchase_requests';
        // Purchase Bill
        $field['purchase_order_id']  = 'purchase_orders';
        $field['purchase_order_detail_id'] = 'purchase_order_details';
        $field['pv_id'] = 'pvs';
        $field['purchase_receive_result_id'] = 'purchase_receive_results';
        // Bill Return
        $field['purchase_return_id']  = 'purchase_returns';
        $field['purchase_return_detail_id']  = 'purchase_return_details';
        $field['purchase_return_receipt_id']  = 'purchase_return_receipts';
        // Pay Bill
        $field['pay_bill_id']  = 'pay_bills';
        // Vendor Consignment
        $field['vendor_consignment_id']  = 'vendor_consignments';
        $field['vendor_consignment_return_id']  = 'vendor_consignment_returns';
        // Landed Cost
        $field['landing_cost_id']  = 'landing_costs';
        $field['landing_cost_receipt_id']  = 'landing_cost_receipts';
        // Module Account
        $field['deposit_to'] = 'chart_accounts';
        $field['ar_id'] = 'chart_accounts';
        $field['ap_id'] = 'chart_accounts';
        $field['vat_chart_account_id'] = 'chart_accounts';
        // Inventory Adjustment
        $field['cycle_product_id'] = 'cycle_products';
        // Request Stock
        $field['request_stock_id'] = 'request_stocks';
        // Tranfer Order
        $field['transfer_order_id'] = 'transfer_orders';
        $field['transfer_order_detail_id'] = 'transfer_order_details';
        $field['transfer_receive_result_id'] = 'transfer_receive_results';
        // Employee
        $field['employee_id']  = 'employees';
        $field['sales_rep_id'] = 'employees';
        $field['deliver_id']   = 'employees';
        $field['collector_id'] = 'employees';
        // General Ledger
        $field['general_ledger_id'] = 'general_ledgers';
        // Expense
        $field['expense_id'] = 'expenses';
        $result = '';
        if(array_key_exists($check, $field)){
            $result = $field[$check];
        }
        return $result;
    }
    
    function checkDateTransaction($branchId){
        $timeNow    = (int) date("H");
        $sqlBranch  = mysql_query("SELECT HOUR(work_start) FROM branches WHERE id = ".$branchId);
        $rowBranch  = mysql_fetch_array($sqlBranch);
        $brachStart = (int) $rowBranch[0];
        $timeFrom   = array();
        for($i=$brachStart; $i < 24; $i++){
            $timeFrom[$i] = $i;
        }
        $return  = date("Y-m-d", strtotime("-1 day", strtotime(date("Y-m-d"))));
        if(array_key_exists($timeNow, $timeFrom)){
            $return  = date("Y-m-d");
        }
        return $return;
    }
    
    function listDays($startDate, $endDate, $format='Y-m-d'){  
        $sStartDate = date("Y-m-d", strtotime($startDate));  
        $sEndDate = date("Y-m-d", strtotime($endDate));  
        $aDays[] = $sStartDate;  
        $sCurrentDate = $sStartDate;  
        while($sCurrentDate < $sEndDate){  
            $sCurrentDate = date("Y-m-d", strtotime("+1 day", strtotime($sCurrentDate)));   
            $aDays[] = date($format, strtotime($sCurrentDate));  
        }   
        return $aDays;  
    }
    
    function getMonthsInRange($startDate, $endDate) {
        $months = array();
        while (strtotime($startDate) <= strtotime($endDate)) {
            $months[] = array('year' => date('Y', strtotime($startDate)), 'month' => date('m', strtotime($startDate)), );
            $startDate = date('d M Y', strtotime($startDate.'+ 1 month'));
        }
        return $months;
    }
    
    function checkDefaultConfig(){
        // Check Brach Type
//        $sqlBrachType = mysql_query("SELECT * FROM branch_types WHERE id = 1;");
//        if(mysql_num_rows($sqlBrachType)){
//            $rowBrachType = mysql_fetch_array($sqlBrachType);
//            if($rowBrachType['sys_code'] != '108de0138a3c639a32e153a442560811' || $rowBrachType['name'] != 'Branch'){
//                // Empty
//                mysql_query("TRUNCATE `branch_types`;");
//                // Insert Defaul
//                mysql_query("INSERT INTO `branch_types` (`sys_code`, `name`, `created`, `created_by`, `modified`) VALUES ('108de0138a3c639a32e153a442560811', 'Branch', '2016-11-04 13:49:31', 1, '2016-11-04 13:49:31');");
//            }
//        } else {
//            // Insert Defaul
//            mysql_query("INSERT INTO `branch_types` (`sys_code`, `name`, `created`, `created_by`, `modified`) VALUES ('108de0138a3c639a32e153a442560811', 'Branch', '2016-11-04 13:49:31', 1, '2016-11-04 13:49:31');");
//        }
        // Check Product Cache
        $sqlProCache = mysql_query("SELECT * FROM cache_datas WHERE id = 1;");
        if(mysql_num_rows($sqlProCache)){
            $rowProCache = mysql_fetch_array($sqlProCache);
            if($rowProCache['type'] != 'Products'){
                // Empty
                mysql_query("TRUNCATE `cache_datas`;");
                // Insert Default
                mysql_query("INSERT INTO `cache_datas` (`type`, `modified`) VALUES ('Products', '2018-02-20 11:41:07');");
            }
        } else {
            // Insert Default
            mysql_query("INSERT INTO `cache_datas` (`type`, `modified`) VALUES ('Products', '2018-02-20 11:41:07');");
        }
        // Check Customer Group
//        $sqlCgroup = mysql_query("SELECT * FROM cgroups WHERE id = 1;");
//        if(mysql_num_rows($sqlCgroup)){
//            $rowCgroup = mysql_fetch_array($sqlCgroup);
//            if($rowCgroup['sys_code'] != '0ea479a9bcbb44100ca1ceb6939cce11'){
//                $sqlCgroupAll = mysql_query("SELECT * FROM cgroups WHERE 1;");
//                // Empty
//                mysql_query("TRUNCATE `cgroups`;");
//                // Insert Default
//                mysql_query("INSERT INTO `cgroups` (`sys_code`, `name`, `description`, `created`, `created_by`, `modified`) VALUES ('0ea479a9bcbb44100ca1ceb6939cce11', 'General', NULL, '2017-07-21 15:36:55', 1, '2017-07-21 15:36:55');");
//                while($rowCgroupAll = mysql_fetch_array($sqlCgroupAll)){
//                    if($rowCgroupAll['sys_code'] == ''){
//                        $sysCode = md5(date("Y-m-d H:i:s").rand().$rowCgroupAll['id']);
//                    } else {
//                        $sysCode = $rowCgroupAll['sys_code'];
//                    }
//                    mysql_query("INSERT INTO `cgroups` (`sys_code`, `name`, `description`, `created`, `created_by`, `modified`, `modified_by`, `user_apply`, `is_active`) "
//                            . "VALUES ('{$sysCode}', '{$rowCgroupAll['name']}', '{$rowCgroupAll['description']}', '{$rowCgroupAll['created']}', {$rowCgroupAll['created_by']}, '{$rowCgroupAll['modified']}', {$rowCgroupAll['modified_by']}, {$rowCgroupAll['user_apply']}, {$rowCgroupAll['is_active']});");
//                }
//            }
//        } else {
//            // Insert Default
//            mysql_query("INSERT INTO `cgroups` (`sys_code`, `name`, `description`, `created`, `created_by`, `modified`) VALUES ('0ea479a9bcbb44100ca1ceb6939cce11', 'General', NULL, '2017-07-21 15:36:55', 1, '2017-07-21 15:36:55');");
//        }
//        // Check Cgroup Company
//        $sqlCgroupCom = mysql_query("SELECT id FROM cgroups WHERE id NOT IN (SELECT cgroup_id FROM cgroup_companies WHERE 1);");
//        if(mysql_num_rows($sqlCgroupCom)){
//            while($rowCgroupCom = mysql_fetch_array($sqlCgroupCom)){
//                mysql_query("INSERT INTO `cgroup_companies` (`cgroup_id`, `company_id`) VALUES ({$rowCgroupCom['id']}, 1);");
//            }
//        }
        
        // Check Customer
//        $sqlCustomer = mysql_query("SELECT * FROM customers WHERE id = 1;");
//        if(mysql_num_rows($sqlCustomer)){
//            $rowCustomer = mysql_fetch_array($sqlCustomer);
//            if($rowCustomer['sys_code'] != '48195eefe4cb8d414f0fc05e52f2696c' || $rowCustomer['customer_code'] != 'General' || $rowCustomer['name'] != 'General'){
//                $sqlCustomerAll = mysql_query("SELECT * FROM customers WHERE 1 ORDER BY id ASC;");
//                // Empty
//                mysql_query("TRUNCATE `customers`;");
//                // Insert Default
//                mysql_query("INSERT INTO `customers` (`sys_code`, `house_no`, `address`, `payment_term_id`, `payment_every`, `customer_code`, `name`, `name_kh`, `mobile_number`, `other_number`, `email`, `fax`, `vat`, `created`, `created_by`, `modified`) VALUES ('48195eefe4cb8d414f0fc05e52f2696c', '', '', 1, '0', 'General', 'General', 'General', '', '', '', '', '', '2015-02-17 14:38:38', 1, '2015-12-29 17:10:59');");
//                while($rowCustomerAll = mysql_fetch_array($sqlCustomerAll)){
//                    if($rowCustomerAll['sys_code'] == ''){
//                        $sysCode = md5(date("Y-m-d H:i:s").rand().$rowCustomerAll['id']);
//                    } else {
//                        $sysCode = $rowCustomerAll['sys_code'];
//                    }
//                    $paymentTermId = $rowCustomerAll['payment_term_id']!=''?$rowCustomerAll['payment_term_id']:'NULL';
//                    mysql_query("INSERT INTO `customers` (`sys_code`, `house_no`, `address`, `payment_term_id`, `payment_every`, `customer_code`, `name`, `name_kh`, `mobile_number`, `other_number`, `email`, `fax`, `vat`, `created`, `created_by`, `modified`, `modified_by`, `type`, `is_active`) "
//                            . "VALUES ('{$sysCode}', '{$rowCustomerAll['house_no']}', '{$rowCustomerAll['address']}', {$paymentTermId}, '{$rowCustomerAll['payment_every']}', '{$rowCustomerAll['customer_code']}', '{$rowCustomerAll['name']}', '{$rowCustomerAll['name_kh']}', '{$rowCustomerAll['mobile_number']}', '{$rowCustomerAll['other_number']}', '{$rowCustomerAll['email']}', '{$rowCustomerAll['fax']}', '{$rowCustomerAll['vat']}', '{$rowCustomerAll['created']}', {$rowCustomerAll['created_by']}, '{$rowCustomerAll['modified']}', '{$rowCustomerAll['modified_by']}', '{$rowCustomerAll['type']}', '{$rowCustomerAll['is_active']}');");
//                }
//            }
//        } else {
//            // Insert Default
//            mysql_query("INSERT INTO `customers` (`sys_code`, `house_no`, `address`, `payment_term_id`, `payment_every`, `customer_code`, `name`, `name_kh`, `mobile_number`, `other_number`, `email`, `fax`, `vat`, `created`, `created_by`, `modified`) VALUES ('48195eefe4cb8d414f0fc05e52f2696c', '', '', 1, '0', 'General', 'General', 'General', '', '', '', '', '', '2015-02-17 14:38:38', 1, '2015-12-29 17:10:59');");
//        }
        
        // Check Customer Company
        $sqlCompany = mysql_query("SELECT id FROM companies WHERE is_active = 1");
        if(mysql_num_rows($sqlCompany)){
            $sqlCustomerCom = mysql_query("SELECT id FROM customers WHERE id NOT IN (SELECT customer_id FROM customer_companies WHERE 1);");
            if(mysql_num_rows($sqlCustomerCom)){
                while($rowCustomerCom = mysql_fetch_array($sqlCustomerCom)){
                    mysql_query("INSERT INTO `customer_companies` (`customer_id`, `company_id`) VALUES ({$rowCustomerCom['id']}, 1);");
                }
            }
        }
        // Check Price Type
//        $sqlPriceType = mysql_query("SELECT * FROM price_types WHERE id = 1;");
//        if(mysql_num_rows($sqlPriceType)){
//            $rowPriceType = mysql_fetch_array($sqlPriceType);
//            if($rowPriceType['sys_code'] != '1fdc275e4fd22798c821a3098d56c69c' || $rowPriceType['name'] != 'E-Commerce'){
//                $sqlPriceTypeAll = mysql_query("SELECT * FROM price_types WHERE 1;");
//                // Empty
//                mysql_query("TRUNCATE `price_types`;");
//                // Insert Default
//                mysql_query("INSERT INTO `price_types` (`sys_code`, `name`, `ordering`, `is_set`, `created`, `created_by`, `modified`, `modified_by`, `is_ecommerce`) VALUES ('1fdc275e4fd22798c821a3098d56c69c', 'E-Commerce', 0, 1, '2017-03-23 20:09:35', 1, '2017-03-25 09:24:32', 1, 1);");
//                while($rowPriceTypeAll = mysql_fetch_array($sqlPriceTypeAll)){
//                    if($rowPriceTypeAll['sys_code'] == ''){
//                        $sysCode = md5(date("Y-m-d H:i:s").rand().$rowPriceTypeAll['id']);
//                    } else {
//                        $sysCode = $rowPriceTypeAll['sys_code'];
//                    }
//                    mysql_query("INSERT INTO `price_types` (`sys_code`, `name`, `ordering`, `is_set`, `created`, `created_by`, `modified`, `modified_by`, `is_ecommerce`, `is_active`) "
//                            . "VALUES ('{$sysCode}', '{$rowPriceTypeAll['name']}', {$rowPriceTypeAll['ordering']}, {$rowPriceTypeAll['is_set']}, '{$rowPriceTypeAll['created']}', {$rowPriceTypeAll['created_by']}, '{$rowPriceTypeAll['modified']}', {$rowPriceTypeAll['modified_by']}, {$rowPriceTypeAll['is_ecommerce']}, {$rowPriceTypeAll['is_active']});");
//                }
//            }
//        } else {
//            // Insert Default
//            mysql_query("INSERT INTO `price_types` (`sys_code`, `name`, `ordering`, `is_set`, `created`, `created_by`, `modified`, `modified_by`, `is_ecommerce`) VALUES ('1fdc275e4fd22798c821a3098d56c69c', 'E-Commerce', 0, 1, '2017-03-23 20:09:35', 1, '2017-03-25 09:24:32', 1, 1);");
//            mysql_query("INSERT INTO `price_types` (`sys_code`, `name`, `ordering`, `is_set`, `created`, `created_by`, `modified`, `modified_by`) VALUES ('7d35f435976aedd4f536cb5e43a2b434', 'Wholesale', 1, 1, '2017-07-21 10:53:30', 1, '2017-10-06 13:47:20', 1);");
//            mysql_query("INSERT INTO `price_types` (`sys_code`, `name`, `ordering`, `is_set`, `created`, `created_by`, `modified`, `modified_by`) VALUES ('56b444f1a5680d214249472b24fbe1b3', 'Retail Price', 2, 1, '2017-07-21 10:53:46', 1, '2017-08-23 15:49:07', 1);");
//        }
        
        // Option Setting
        $sqlOpt = mysql_query("SELECT * FROM setting_options WHERE 1");
        if(!mysql_num_rows($sqlOpt)){
            mysql_query("INSERT INTO `setting_options` (`uom_detail_option`, `calculate_cogs`, `shift`, `product_cost_decimal`, `allow_delivery`) VALUES (0, 1, 0, 2, 0);");
        }
        
        // Track Inventory Valuation
        $sqlTrack = mysql_query("SELECT * FROM tracks WHERE id = 1;");
        if(!mysql_num_rows($sqlTrack)){
            mysql_query("INSERT INTO `tracks` (`description`, `val`, `is_recalculate`) VALUES ('Recalculate Average Cost', '2017-11-07', 1);");
        }
        
        // Check Unearned Track
        $sqlUnearnTrack = mysql_query("SELECT * FROM unearned_tacks WHERE id = 1;");
        if(!mysql_num_rows($sqlUnearnTrack)){
            mysql_query("INSERT INTO `unearned_tacks` (`is_processing`) VALUES (0);");
        }
        
        // Check UoM
//        $sqlUom = mysql_query("SELECT * FROM uoms WHERE id = 1;");
//        if(mysql_num_rows($sqlUom)){
//            $rowUom = mysql_fetch_array($sqlUom);
//            if($rowUom['sys_code'] != '4230a9bf25116858815bcf69af1a95ff' || $rowUom['type'] != 'Time' || $rowUom['name'] != 'Month' || $rowUom['abbr'] != 'Month'){
//                $sqlUomAll = mysql_query("SELECT * FROM uoms WHERE 1;");
//                // Empty
//                mysql_query("TRUNCATE `uoms`;");
//                // Insert Default
//                mysql_query("INSERT INTO `uoms` (`sys_code`, `type`, `name`, `abbr`, `created`, `created_by`, `modified`) VALUES ('4230a9bf25116858815bcf69af1a95ff', 'Time', 'Month', 'Month', '2018-02-16 09:47:52', 1, '2018-02-16 09:47:52');");
//                while($rowUomAll = mysql_fetch_array($sqlUomAll)){
//                    if($rowUomAll['sys_code'] == ''){
//                        $sysCode = md5(date("Y-m-d H:i:s").rand().$rowUomAll['id']);
//                    } else {
//                        $sysCode = $rowUomAll['sys_code'];
//                    }
//                    mysql_query("INSERT INTO `uoms` (`sys_code`, `type`, `name`, `abbr`, `created`, `created_by`, `modified`, `modified_by`, `is_active`) "
//                            . "VALUES ('{$sysCode}', '{$rowUomAll['type']}', '{$rowUomAll['name']}', '{$rowUomAll['abbr']}', '{$rowUomAll['created']}', {$rowUomAll['created_by']}, '{$rowUomAll['modified']}', '{$rowUomAll['modified_by']}', {$rowUomAll['is_active']});");
//                }
//            }
//        } else {
//            mysql_query("INSERT INTO `uoms` (`sys_code`, `type`, `name`, `abbr`, `created`, `created_by`, `modified`) VALUES ('4230a9bf25116858815bcf69af1a95ff', 'Time', 'Month', 'Month', '2018-02-16 09:47:52', 1, '2018-02-16 09:47:52');");
//            mysql_query("INSERT INTO `uoms` (`sys_code`, `type`, `name`, `abbr`, `created`, `created_by`, `modified`) VALUES ('1fcf633f114ae6b9ef272d75a47eaf85', 'Count', 'Unit', 'Unit', '2018-02-16 09:47:52', 1, '2018-02-16 09:47:52');");
//        }
    }
    
    function Safeb64Encode($string) {
        $data = base64_encode($string);
        $data = str_replace(array('+','/','='),array('-','_',''),$data);
        return $data;
    }
    
    function encode($value, $skey){ 
        if(!$value){return false;}
        $text = $value;
        $iv_size = mcrypt_get_iv_size(MCRYPT_RIJNDAEL_256, MCRYPT_MODE_ECB);
        $iv = mcrypt_create_iv($iv_size, MCRYPT_RAND);
        $crypttext = mcrypt_encrypt(MCRYPT_RIJNDAEL_256, $skey, $text, MCRYPT_MODE_ECB, $iv);
        return trim($this->Safeb64Encode($crypttext)); 
    }
    
    function checkConfigPath($name){
        // Reset Configuration Path
//        mysql_query("TRUNCATE `test`;");
        // Run Wget Check Path
//        shell_exec("wget -b -q -O public/logs/silentOps?name=" . $name . " '" . LINK_URL . "silentOps/" . $name . "' " . LINK_URL_SSL);
    }
    
    function getProductRelation($pid, $typeId){
        $name = "N/A";
        if($typeId == 1){
            // Sub-Sub Category
            $queryPgroup = mysql_query("SELECT name FROM pgroups WHERE id = (SELECT pgroup_id FROM product_pgroups WHERE product_id = '".$pid."') LIMIT 01");
            if(mysql_num_rows($queryPgroup)){
                $dataPgroup = mysql_fetch_array($queryPgroup);
                $name = $dataPgroup['name'];
            }
        }else if($typeId == 2){
            // Sub Category
            $queryPgroup = mysql_query("SELECT (SELECT name FROM pgroups WHERE id = parent_id LIMIT 01) AS name FROM pgroups WHERE id = (SELECT pgroup_id FROM product_pgroups WHERE product_id = '".$pid."')");
            if(mysql_num_rows($queryPgroup)){
                $dataPgroup = mysql_fetch_array($queryPgroup);
                $name = $dataPgroup['name'];
            }
        }else if($typeId == 3){
            // Category
            $queryPgroup = mysql_query("SELECT parent_id FROM pgroups WHERE id = (SELECT pgroup_id FROM product_pgroups WHERE product_id = '".$pid."')");
            if(mysql_num_rows($queryPgroup)){
                $dataPgroup = mysql_fetch_array($queryPgroup);
                $queryCategory = mysql_query("SELECT name FROM pgroups WHERE id = '".$dataPgroup['parent_id']."' LIMIT 01");
                if(mysql_num_rows($queryCategory)){
                    $dataCategory = mysql_fetch_array($queryCategory);
                    $name = $dataCategory['name'];
                }
            }
        }else{
            // Department
            $queryPgroup = mysql_query("SELECT (SELECT name FROM departments WHERE id = department_id LIMIT 01) AS name FROM pgroups WHERE id = (SELECT pgroup_id FROM product_pgroups WHERE product_id = '".$pid."') LIMIT 01");
            if(mysql_num_rows($queryPgroup)){
                $dataPgroup = mysql_fetch_array($queryPgroup);
                $name = $dataPgroup['name'];
            }
        }
        return $name;
    }
    
}

?>